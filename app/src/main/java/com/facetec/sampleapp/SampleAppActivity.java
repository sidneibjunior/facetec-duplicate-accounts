// Welcome to the FaceTec Sample App
// This sample demonstrates Initialization, Liveness Check, Enrollment, Authentication, Photo ID Match, Customizing the UX, and Getting Audit Trail Images.
// Please use our technical support form to submit questions and issue reports:  https://dev.facetec.com/
package com.facetec.sampleapp;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.text.InputType;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;

import androidx.databinding.DataBindingUtil;
import com.facetec.sampleapp.databinding.ActivityMainBinding;
import com.facetec.sdk.*;
import org.json.JSONException;
import org.json.JSONObject;
import java.io.IOException;
import Processors.AuthenticateProcessor;
import Processors.Config;
import Processors.DuplicateAccountCheckProcessor;
import Processors.EnrollmentProcessor;
import Processors.NetworkingHelpers;
import Processors.Processor;
import Processors.LivenessCheckProcessor;
import Processors.PhotoIDMatchProcessor;
import Processors.ThemeHelpers;
import okhttp3.Call;
import okhttp3.Callback;
import static java.util.UUID.randomUUID;

public class SampleAppActivity extends Activity {
    public ActivityMainBinding activityMainBinding;
    public SampleAppUtilities utils = new SampleAppUtilities(this);
    public FaceTecSessionResult latestSessionResult;
    public FaceTecIDScanResult latestIDScanResult;
    public Processor latestProcessor;
    String latestExternalDatabaseRefID = "";
    private boolean isSessionPreparingToLaunch = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        configureInitialSampleAppUI();

        // Initialize FaceTec SDK
        Config.initializeFaceTecSDKFromAutogeneratedConfig(this, new FaceTecSDK.InitializeCallback() {
            @Override
            public void onCompletion(final boolean successful) {
                if(successful) {
                    Log.d("FaceTecSDKSampleApp", "Initialization Successful.");
                    utils.enableAllButtons();
                }

                // Displays the FaceTec SDK Status to text field.
                utils.displayStatus(FaceTecSDK.getStatus(SampleAppActivity.this).toString());
            }
        });

        // Set your FaceTec Device SDK Customizations.
        ThemeHelpers.setAppTheme(this, utils.currentTheme);

        // Set the strings to be used for group names, field names, and placeholder texts for the FaceTec ID Scan User OCR Confirmation Screen.
        SampleAppUtilities.setOCRLocalization(this);

        // Set the FaceTec Customization defined in the Config File.
        SampleAppUtilities.setVocalGuidanceSoundFiles();
       utils.setUpVocalGuidancePlayers();
    }

    @Override
    public void onBackPressed() {
        // If the activity is in the process of launching FaceTec sessions, don't exit the app.
        if(isSessionPreparingToLaunch) {
            return;
        }

        super.onBackPressed();
    }

    // Perform Liveness Check.
    public void onLivenessCheckPressed(View v) {
        isSessionPreparingToLaunch = true;

        utils.fadeOutMainUIAndPrepareForFaceTecSDK(new Runnable() {
            @Override
            public void run() {
                getSessionToken(new SessionTokenCallback() {
                    @Override
                    public void onSessionTokenReceived(String sessionToken) {
                        isSessionPreparingToLaunch = false;
                        latestProcessor = new LivenessCheckProcessor( sessionToken,SampleAppActivity.this);
                    }
                });
            }
        });
    }

    // Perform Enrollment, generating a username each time to guarantee uniqueness.
    public void onEnrollUserPressed(View v) {
        isSessionPreparingToLaunch = true;

        utils.fadeOutMainUIAndPrepareForFaceTecSDK(new Runnable() {
            @Override
            public void run() {
                getSessionToken(new SessionTokenCallback() {
                    @Override
                    public void onSessionTokenReceived(String sessionToken) {
                        isSessionPreparingToLaunch = false;
                        latestExternalDatabaseRefID = "android_sample_app_" + randomUUID();
                        latestProcessor = new EnrollmentProcessor(sessionToken, SampleAppActivity.this);
                    }
                });
            }
        });
    }

    // Perform Authentication, using the username from Enrollment.
    public void onAuthenticateUserPressed(View v) {
        isSessionPreparingToLaunch = true;

        if(latestExternalDatabaseRefID.length() == 0){
            utils.displayStatus("Please enroll first before trying authentication.");
            return;
        }

        utils.fadeOutMainUIAndPrepareForFaceTecSDK(new Runnable() {
            @Override
            public void run() {
                getSessionToken(new SessionTokenCallback() {
                    @Override
                    public void onSessionTokenReceived(String sessionToken) {
                        isSessionPreparingToLaunch = false;
                        latestProcessor = new AuthenticateProcessor( sessionToken, SampleAppActivity.this);
                    }
                });
            }
        });
    }

    // Perform Photo ID Match, generating a username each time to guarantee uniqueness.
    public void onPhotoIDMatchPressed(View view) {
        isSessionPreparingToLaunch = true;

        utils.fadeOutMainUIAndPrepareForFaceTecSDK(new Runnable() {
            @Override
            public void run() {
                getSessionToken(new SessionTokenCallback() {
                    @Override
                    public void onSessionTokenReceived(String sessionToken) {
                        isSessionPreparingToLaunch = false;
                        latestExternalDatabaseRefID = "android_sample_app_" + randomUUID();
                        latestProcessor = new PhotoIDMatchProcessor(sessionToken, SampleAppActivity.this);
                    }
                });
            }
        });
    }

    // Perform Photo ID Match, generating a username each time to guarantee uniqueness.
    public void onDuplicateAccountsCheckPressed(View view) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Enter your UserID");

        final EditText input = new EditText(this);
        builder.setView(input);

        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                final String userId = input.getText().toString();

                isSessionPreparingToLaunch = true;

                utils.fadeOutMainUIAndPrepareForFaceTecSDK(new Runnable() {
                    @Override
                    public void run() {
                        getSessionToken(new SessionTokenCallback() {
                            @Override
                            public void onSessionTokenReceived(String sessionToken) {
                                isSessionPreparingToLaunch = false;
                                latestExternalDatabaseRefID = "android_sample_app_" + randomUUID();
                                latestProcessor = new DuplicateAccountCheckProcessor(sessionToken, SampleAppActivity.this, userId);
                            }
                        });
                    }
                });
            }
        });
        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
            }
        });
        builder.show();


    }

    public void onVocalGuidanceSettingsButtonPressed(View v) {
        utils.setVocalGuidanceMode();
    }

    // When the FaceTec SDK is completely done, you receive control back here.
    // Since you have already handled all results in your Processor code, how you proceed here is up to you and how your App works.
    // In general, there was either a Success, or there was some other case where you cancelled out.
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if(latestProcessor == null) {
            return;
        }

        utils.fadeInMainUI();

        // At this point, you have already handled all results in your Processor code.
        if(this.latestProcessor.isSuccess()) {
            utils.displayStatus("Success");

        }
        else {
            utils.displayStatus("Session exited early, see logs for more details.");

            // Reset the enrollment identifier.
            latestExternalDatabaseRefID = "";
        }
    }

    //
    // DEVELOPER NOTE:  This is a convenience function for demonstration purposes only so the Sample App can have access to the latest session results.
    // In your code, you may not even want or need to do this.
    //
    public void setLatestSessionResult(FaceTecSessionResult sessionResult) {
        this.latestSessionResult = sessionResult;
    }
    //
    // DEVELOPER NOTE:  This is a convenience function for demonstration purposes only so the Sample App can have access to the latest id scan results.
    // In your code, you may not even want or need to do this.
    //
    public void setLatestIDScanResult(FaceTecIDScanResult idScanResult) {
        this.latestIDScanResult = idScanResult;
    }

    public String getLatestExternalDatabaseRefID() {
        return latestExternalDatabaseRefID;
    }

    public void configureInitialSampleAppUI() {
        activityMainBinding = DataBindingUtil.setContentView(this, R.layout.activity_main);
        utils.displayStatus("Initializing...");

        utils.setupAllButtons();

        // If the screen size is small, reduce FaceTec Logo
        if(getResources().getConfiguration().screenHeightDp < 500) {
            activityMainBinding.facetecLogo.setScaleX(0.6f);
            activityMainBinding.facetecLogo.setScaleY(0.6f);
            ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) activityMainBinding.facetecLogo.getLayoutParams();
            params.setMargins(0, 0, 0, 0);
        }
    }

    // Display audit trail images captured from user's last session
    public void onViewAuditTrailPressed(View view) {
        utils.showAuditTrailImages();
    }

    // Present settings action sheet, allowing user to select a new app theme (pre-made FaceTecCustomization configuration).
    public void onThemeSelectionPressed(View view) {
        utils.showThemeSelectionMenu();
    }

    interface SessionTokenCallback {
        void onSessionTokenReceived(String sessionToken);
    }

    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {
        utils.showSessionTokenConnectionText();

        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
                Log.d("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");

                // If this comes from HTTPS cancel call, don't set the sub code to NETWORK_ERROR.
                if(!e.getMessage().equals(NetworkingHelpers.OK_HTTP_RESPONSE_CANCELED)) {
                    utils.handleErrorGettingServerSessionToken();
                }
            }

            @Override
            public void onResponse(Call call, okhttp3.Response response) throws IOException {
                String responseString = response.body().string();
                response.body().close();
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if(responseJSON.has("sessionToken")) {
                        utils.hideSessionTokenConnectionText();
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                    }
                    else {
                        utils.handleErrorGettingServerSessionToken();
                    }
                }
                catch(JSONException e) {
                    e.printStackTrace();
                    Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
                    utils.handleErrorGettingServerSessionToken();
                }
            }
        });
    }
}
